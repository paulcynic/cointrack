version: "3"
services:
#==============TRAEFIK=PROXY==================================================
  proxy:
    image: traefik:v2.2
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "cert:/le"
    command:
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"
      - "--providers.docker=true"
      - "--providers.docker.watch=true"
      - "--providers.docker.swarmmode=true"
      - "--providers.docker.network=cointrack_default"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)"
      - "--log"
      - "--log.level=INFO"
      - "--accesslog"
      - "--api"
      - "--providers.docker.exposedbydefault=false"
      # Create mechanism to generate certifiacte called "LE"
      - "--certificatesresolvers.le.acme.tlschallenge=true"
      !!- "--certificatesresolvers.le.acme.email=${LETSENCRYPT_EMAIL?Variable not set}"
      # Store obtained certificates on the given storage
      - "--certificatesresolvers.le.acme.storage=/le/acme.json"
      # Allow to communicate with backend containers running https. https://stackoverflow.com/questions/49412376/internal-server-error-with-traefik-https-backend-on-port-443
      #- --serverstransport.insecureskipverify=true
    ports:
      - "80:80"
      - "443:443"
    labels: # !!!!Установи домен хоста и basic-auth traefik dashboard
      # Enable Traefik for this service, to make it available in the public network
      - "traefik.enable=true"
      # Use the traefik-public network (declared below)
      - "traefik.docker.network=cointrack_default"
      # This public Traefik will only use services with this label
      - "traefik.constraint-label=traefik-public"
      # ======================middlewares=for=all=services====================
      - "traefik.http.middlewares.https-8080-redirect.redirectscheme.port=8080"
      - "traefik.http.middlewares.https-8002-redirect.redirectscheme.port=8002"
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
      #!- "traefik.http.middlewares.admin-auth.basicauth.users=TRAEFIK_DASHBOARD_USERNAME:TRAEFIK_DASHBOARD_HASHED_PASSWORD"
      # ===========Traefik=Dashboard=service==================================
      - "traefik.http.routers.traefik-dashboard-http.rule=Host(`traefik.democointrack.ru`)"
      - "traefik.http.routers.traefik-dashboard-http.entrypoints=http"
      - "traefik.http.routers.traefik-dashboard-http.middlewares=https-redirect"
      - "traefik.http.routers.traefik-dashboard-https.rule=Host(`traefik.democointrack.ru`)"
      - "traefik.http.routers.traefik-dashboard-https.middlewares=admin-auth"
      - "traefik.http.routers.traefik-dashboard-https.entrypoints=https"
      - "traefik.http.routers.traefik-dashboard-https.tls=true"
      - "traefik.http.routers.traefik-dashboard-https.tls.certresolver=le"
      - "traefik.http.routers.traefik-dashboard-https.service=api@internal"
      - "traefik.http.services.traefik-proxy.loadbalancer.server.port=8080"

#==============REACT=FRONTEND==============================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    depends_on:
      - backend
    ports:
      - "8080:80"
    labels:
      - "traefik.enable=true"
      - "traefik.constraint-label=traefik-public"
      # Check free domens in nic.ru
      # ======================proxy=for=cointrack=stack=======================
      - "traefik.http.routers.cointrack-http.entrypoints=http"
      - "traefik.http.routers.cointrack-http.rule=Host(`democointrack.ru`)"
      - "traefik.http.routers.cointrack-http.middlewares=https-redirect"
      - "traefik.http.routers.cointrack-https.rule=Host(`democointrack.ru`)"
      - "traefik.http.routers.cointrack-https.entrypoints=https"
      - "traefik.http.routers.cointrack-https.middlewares=https-8080-redirect"
      - "traefik.http.routers.cointrack-https.tls=true"
      - "traefik.http.routers.cointrack-https.tls.certresolver=le"
      # Define the port inside of the Docker-service to use
      - "traefik.http.services.cointrack-frontend.loadbalancer.server.port=80"
#==============FASTAPI=BACKEND=============================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on:
      - db
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/cointrack_db
      - BACKEND_CORS_ORIGINS=["http://127.0.0.1:8002","http://127.0.0.1:8080"]
    ports:
      - "8002:8002"
    labels:
      - "traefik.enable=true"
      - "traefik.constraint-label=traefik-public"
      - "traefik.http.routers.cointrack-backend.rule=PathPrefix(`/api/`)"
      - "traefik.http.routers.cointrack-backend.middlewares=https-8002-redirect"
      - "traefik.http.services.cointrack-backend.loadbalancer.server.port=8002"
#==============POSTGRES=DATABASE===========================================
  db:
    image: postgres:14  # https://hub.docker.com/_/postgres
    ports:
      - "5433"
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_SERVER=db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=cointrack_db
#===============VOLUMES====================================================
volumes:
  app-db-data:
  cert:
